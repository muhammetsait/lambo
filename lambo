#!/usr/bin/env bash

## Set up colors
red=$(tput setaf 1)
green=$(tput setaf 2)
orange=$(tput setaf 3)
reset=$(tput sgr0)

## Terminal Editors
TERMINAL_EDITORS=("vim" "vi" "nano" "pico" "ed" "emacs" "nvim")

## Init functions
showhelp()
{
    printf "${green}"
    echo '    __                    __        
   / /   ____ _____ ___  / /_  ____ 
  / /   / __ `/ __ `__ \/ __ \/ __ \
 / /___/ /_/ / / / / / / /_/ / /_/ /
/_____/\__,_/_/ /_/ /_/_.___/\____/ 
                                    '
    echo "${green}Lambo:${reset} Super-powered '${orange}laravel new${reset}' for Laravel and Valet"
    echo " "
    echo "${orange}Usage:"
    echo "${reset}  lambo myApplication [arguments]"
    echo " "
    echo "${orange}Commands (lambo COMMANDNAME):"
    echo " "
    echo "${green}   make-config${reset}                  Generate config file"
    echo "${green}   edit-config${reset}                  Edit config file"
    echo " "
    echo "${green}   make-after${reset}                   Generate after file"
    echo "${green}   edit-after${reset}                   Edit after file"
    echo " "
    echo "${orange}Options (lambo myApplication OPTIONS):"
    echo "${green}  -h, --help${reset}                    Show brief help"
    echo "${green}  -e, --editor EDITOR${reset}           Specify an editor to run '${green}EDITOR .${reset}' with after"
    echo "${green}  -m, --message \"message\"${reset}       Customize the initial commit message"
    echo "${green}  -p, --path PATH${reset}               Customize the path in which the new project will be created"
    echo "${green}  -d, --dev${reset}                     Use Composer to install on the develop branch"
    echo "${green}  -a, --auth${reset}                    Use Artisan to scaffold all of the routes and views you need for authentication"
    echo "${green}  -n, --node${reset}                    Runs '${green}yarn${reset}' if installed, otherwise runs '${green}npm install${reset}' after creating the project"
    echo "${green}  -b, --browser \"browser path\"${reset}  Opens site in specified browser"
    echo "${green}  -l, --link${reset}                    Creates a Valet link to the project directory"
    echo "${green}  -s, --secure${reset}                  Generate and use https with Valet"
    echo "${green}  -q, --quiet${reset}                   Use muffler (quiet mode)"
    echo "${green}  --create-db${reset}                   Create a new MySql database"
    echo "${green}  --dbuser${reset}                      Specify the database user"
    echo "${green}  --dbpassword${reset}                  Specify the database password"
    echo "${green}  --vue${reset}                         Specify Vue as the frontend"
    echo "${green}  --bootstrap${reset}                   Specify Bootstrap as the frontend"
    echo "${green}  --react${reset}                       Specify React as the frontend"
    quit
}

isterminaleditor () {
    for EDITOR in $TERMINAL_EDITORS; do [[ "$EDITOR" == "$CODEEDITOR" ]] && return 0; done
    return 1
}

editconfig()
{
    if [[ ! -f ~/.lambo/config ]]; then
        echo "Config does not exist; creating."

        makeconfig
        return
    fi

    edit ~/.lambo/config
}

makeconfig()
{
    if [[ -f ~/.lambo/config ]]; then
        echo "Config already exists."
        quit
    fi

    if [[ ! -d ~/.lambo ]]; then
      mkdir ~/.lambo
    fi

    echo '#!/usr/bin/env bash

PROJECTPATH="."
MESSAGE="Initial commit."
QUIET=false
DEVELOP=false
AUTH=false
NODE=false
CODEEDITOR=""
BROWSER=""
SHELL=""
LINK=false
FRONTEND="vue"
CREATE_DATABASE=false
DB_USERNAME="root"
DB_PASSWORD=""' > ~/.lambo/config

    edit ~/.lambo/config
}

editafter()
{
    if [[ ! -f ~/.lambo/after ]]; then
        echo "after file does not exist; creating."

        makeafter
        return
    fi

    edit ~/.lambo/after
}

makeafter()
{
    if [[ -f ~/.lambo/after ]]; then
        echo "after file already exists."
        quit
    fi

    if [[ ! -d ~/.lambo ]]; then
      mkdir ~/.lambo
    fi

    echo '#!/usr/bin/env bash

# Install additional composer dependencies as you would from the command line.
# echo "
# Installing Composer Dependencies
# "
# composer require tightenco/mailthief tightenco/quicksand

# To copy standard files to new lambo project place them in ~/.lambo/includes directory.
# echo "
# Copying Include Files
# "
# cp -R ~/.lambo/includes/ $PROJECTPATH

# To add a git commit after given modifications
# echo "
# Committing after modifications to Git
# "
# git add .
# git commit -am "Initialize Composer dependencies and additional files."
' > ~/.lambo/after

    edit ~/.lambo/after
}

edit()
{
    ## Open with best editor
    if [[ $CODEEDITOR ]]; then
        $CODEEDITOR $1
    elif [[ $EDITOR ]]; then
        $EDITOR $1
    else
        vim $1
    fi
}

abort()
{
    echo >&2 '
***********************************************
*** There was an error running this script. ***
***********************************************
'
    echo "An error occurred. Exiting..." >&2
    exit 1
}

quit()
{
    trap : 0
    exit 0
}

ui_package_exists()
{
    composer show | grep laravel/ui >/dev/null
}

createdatabase()
{
    if hash mysql 2>/dev/null; then
        mysql --user=$DB_USERNAME --password=$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE;"
    else
        echo "${red}MySql is not installed. Skipping this step...${reset}"
    fi
}


## Set up error handling
trap 'abort' 0

## Start script

QUIET=false
PROJECTNAME=$1
PROJECTPATH="."
MESSAGE="Initial commit."
DEVELOP=false
AUTH=false
NODE=false
CODEEDITOR=""
BROWSER=""
SHELL=""
FRONTEND="vue"
DB_DATABASE="${PROJECTNAME//[-]/_}"
CREATE_DATABASE=false
DB_USERNAME="root"
DB_PASSWORD=""
if [[ -f ~/.config/valet/config.json ]]; then
    TLD=$(php -r "echo json_decode(file_get_contents('$HOME/.config/valet/config.json'))->tld;")
else
    TLD=$(php -r "echo json_decode(file_get_contents('$HOME/.valet/config.json'))->domain;")
fi
LINK=false

### Load config if it exists
if [[ -f ~/.lambo/config ]]; then
    source ~/.lambo/config
fi

### Check for project name argument; if none passed, show help
if [[ $# -eq 0 ]]; then
    showhelp
fi

### Check if user wants to set up a config file.
if [[ $1 == "make-config" ]]; then
    makeconfig
    quit
fi

if [[ $1 == "edit-config" ]]; then
    editconfig
    quit
fi

### Check if user wants to set up a after file.
if [[ $1 == "make-after" ]]; then
    makeafter
    quit
fi

if [[ $1 == "edit-after" ]]; then
    editafter
    quit
fi

### Handle arguments
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            showhelp
            ;;
        -p|--path)
            PROJECTPATH="$2"
            shift
            ;;
        -m|--message)
            MESSAGE="$2"
            shift
            ;;
        -e|--editor)
            CODEEDITOR="$2"
            shift
            ;;
        -b|--browser)
            BROWSER="$2"
            shift
            ;;
        -d|--develop|--dev)
            DEVELOP=true
            ;;
        -a|--auth)
            AUTH=true
            ;;
        -n|--node)
            NODE=true
            ;;
        -l|--link)
            LINK=true
            ;;
        -s|--secure)
            SECURE=true
            ;;
        --create-db)
            CREATE_DATABASE=true
            ;;
        --dbuser)
            DB_USERNAME="$2"
            shift
            ;;
        --dbpassword)
            DB_PASSWORD="$2"
            shift
            ;;
        --vue)
            FRONTEND="vue"
            shift
            ;;
        --bootstrap)
            FRONTEND="bootstrap"
            shift
            ;;
        --react)
            FRONTEND="react"
            shift
            ;;
        -q|--quiet)
            QUIET=true
            ;;
        *)
            ;;
    esac

    shift
done

if [ -d "$PROJECTPATH/$PROJECTNAME" ]; then
  echo "${red}Project directory $PROJECTPATH/$PROJECTNAME already exists.${reset}"
  quit
fi

if ! hash php 2>/dev/null; then
  echo "${red}PHP is not installed.${reset}"
  quit
fi

if ! hash laravel 2>/dev/null; then
  echo "${red}Laravel installer not installed.${reset}"
  quit
fi

if ! hash git 2>/dev/null; then
  echo "${red}Git not installed.${reset}"
  quit
fi

cd "$PROJECTPATH" || exit

echo "
***********************************************
Creating new Laravel app ${green}$PROJECTNAME${reset}
***********************************************
"

if [[ "$QUIET" = true ]]; then
    QUIET="--quiet"
    SILENT="--silent"
else
    QUIET=""
    SILENT=""
fi

if [[ "$DEVELOP" = true ]]; then
    laravel new "$PROJECTNAME" "$QUIET" --dev
else
    laravel new "$PROJECTNAME" "$QUIET"
fi

cd "$PROJECTNAME" || exit

if [[ "$CODEEDITOR" != "" ]]; then
    if ! isterminaleditor; then
       $CODEEDITOR .
   fi
fi

if [[ "$FRONTEND" != "" ]]; then
    echo "
${green}Installing ${orange}laravel/ui${green}...${reset}
    "
    composer require laravel/ui "$QUIET"

    if [[ "$FRONTEND" = "bootstrap" ]]; then
        php artisan ui bootstrap
    fi
    if [[ "$FRONTEND" = "vue" ]]; then
        php artisan ui vue
    fi
    if [[ "$FRONTEND" = "react" ]]; then
        php artisan ui react
    fi
fi

if [[ "$AUTH" = true ]]; then
    # check to see if the ui package is already included
    if ! ui_package_exists; then
        echo "
${green}Installing ${orange}laravel/ui${green}...${reset}
    "
        composer require laravel/ui "$QUIET"
    fi
    
    php artisan ui:auth
fi

if [[ "$NODE" = true ]]; then
    echo "
${green}Installing NPM dependencies...${reset}
    "
    # check if yarn is executable, otherwise use npm
    if hash yarn 2>/dev/null; then
        yarn "$SILENT"
    else
        npm install "$SILENT"
    fi
fi

# Update .env.example to point to this database with `root` username and blank pw,
# like Mac MySQL defaults, and appropriate domain

PROJECTURL="http://$PROJECTNAME.$TLD"

perlCommands=(
    "s/(?'var'DB_DATABASE=)(.*)/$+{var}$DB_DATABASE/g"
    "s/(?'var'DB_USERNAME=)(.*)/$+{var}$DB_USERNAME/g"
    "s/(?'var'DB_PASSWORD=)(.*)/$+{var}$DB_PASSWORD/g"
    "s/(?'var'APP_URL=)(.*)/$+{var}http:\/\/$PROJECTNAME.$TLD/g"
)

for perlCommand in "${perlCommands[@]}"; do
    perl -pi -e "$perlCommand" ".env.example"
done

cp .env.example .env

php artisan key:generate --ansi

git init
git add .
git commit -m "$MESSAGE" "$QUIET"

if [[ "$LINK" = true ]]; then
    valet link "$PROJECTNAME"
fi

if [[ "$SECURE" = true ]]; then
    valet secure "$PROJECTNAME"
fi

### Create database if config is set to true
if [[ "$CREATE_DATABASE" = true ]]; then
    echo "
${green}Creating database...${reset}
    "
    createdatabase
fi

### Load after file if it exists
if [[ -f ~/.lambo/after ]]; then
    echo "
${green}Running additional commands...${reset}
    "
    source ~/.lambo/after
fi

### Open the browser
if [[ "$(uname)" == "Darwin" ]]; then
    if [[ "$BROWSER" != "" ]]; then
        open -a "$BROWSER" "$PROJECTURL"
    else
        open "$PROJECTURL"
    fi
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    xdg-open "$PROJECTURL" &> /dev/null
fi

case $PROJECTPATH in
 ".") prettyPath="$PROJECTNAME" ;;
 *) prettyPath="$PROJECTPATH/$PROJECTNAME" ;;
esac

if [[ "$CODEEDITOR" != "" ]]; then
    if isterminaleditor; then
       $CODEEDITOR .
   fi
fi

if [[ "$SHELL" != "" ]]; then
    echo "

***********************************************

You're ready to go!
"
    exec "$SHELL"
else
    echo "

***********************************************

You're ready to go! Remember to cd into '${green}$prettyPath${reset}' before you start editing."
fi

# End script; disable error handling
trap : 0
